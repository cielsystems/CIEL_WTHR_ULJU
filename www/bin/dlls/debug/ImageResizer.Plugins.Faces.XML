<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageResizer.Plugins.Faces</name>
    </assembly>
    <members>
        <member name="M:ImageResizer.Plugins.Faces.FacesPlugin.GetFacesFromImageAsString(System.Object,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a comma-delimited list of face coordinates (x,y,x2,y2,accuracy) for the given image (path, stream, Bitmap, etc).
            Note that the face coordinates are relative to the unrotated, unflipped source image.
            ImageResizer.js can *keep* these coordinates synced during rotations/flipping if they are stored in the 'f.rects' querystring key before the 'srotate' or 'sflip' commands are applied.
            </summary>
            <param name="image"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.Faces.FacesPlugin.GetFacesFromImage(System.Object,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a list of face objects for the given image (path, stream, Bitmap, etc).
            Note that the face coordinates are relative to the unrotated, unflipped source image.
            ImageResizer.js can *keep* these coordinates synced during rotations/flipping if they are stored in the 'f.rects' querystring key before the 'srotate' or 'sflip' commands are applied.
            </summary>
            <param name="image"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.Faces.FacesPlugin.Pipeline_PreHandleImage(System.Web.IHttpModule,System.Web.HttpContext,ImageResizer.Caching.IResponseArgs)">
            <summary>
            This is where we hijack the resizing process, interrupt it, and send back the json data we created.
            </summary>
            <param name="sender"></param>
            <param name="context"></param>
            <param name="e"></param>
        </member>
        <member name="T:ImageResizer.Plugins.Faces.IFeature">
            <summary>
            Represents a detected feature, such as a face, eye, or eye pair
            </summary>
        </member>
        <member name="T:ImageResizer.Plugins.Faces.FaceDetection">
            <summary>
            Provides a simple API for face detection
            </summary>
        </member>
        <member name="T:ImageResizer.Plugins.Faces.FeatureDetectionBase`1">
            <summary>
            Not thread safe. 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ImageResizer.Plugins.Faces.FeatureDetectionBase`1.scaledBounds">
            <summary>
            Large images will be scaled down to less than scaledBounds X scaledBounds for feature detection.
            Defaults to 1000
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.Faces.FeatureDetectionBase`1.Dispose">
            <summary>
            Disposes all loaded cascades
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.Faces.FaceDetection.DetectFeatures(OpenCvSharp.IplImage,OpenCvSharp.CvMemStorage)">
            <summary>
            Detects features on a grayscale image.
            </summary>
            <param name="img"></param>
            <param name="storage"></param>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Plugins.Faces.FaceDetection.MinFaces">
            <summary>
            The minimum number of faces expected
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Faces.FaceDetection.MaxFaces">
            <summary>
            The maximum number of faces wanted
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Faces.FaceDetection.MinSizePercent">
            <summary>
            The smallest face that will be detected, represented in a 1..100 percentage of the (smaller of width and height).
            Defaults to 3 percent (3.0f)
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Faces.FaceDetection.ConfidenceLevelThreshold">
            <summary>
            The minimum number of agreeing matches required for a face rectangle to be returned. 
            This rule isn't applied if we don't have [MinFaces] number of faces.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Faces.FaceDetection.MinConfidenceLevel">
            <summary>
            The minimum number of agreeing matches required for a face rectangle to be evaluated
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Faces.FaceDetection.ExpandX">
            <summary>
            The percentage by which to expand each face rectangle horizontally after detection. To expand 5% each side, set to 0.1
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Faces.FaceDetection.ExpandY">
            <summary>
            The percentage by which to expand each face rectangle vertically after detection. To expand 20% on the top and bottom, set to 0.4
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.Faces.DetectionResponse`1.PopulateFrom(ImageResizer.Resizing.ImageState)">
            <summary>
            Copies layout information from the given image state to the current instance. 
            Does not populate message or 'features' variables
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:ImageResizer.Plugins.CropAround.CropAroundPlugin">
            <summary>
            Enables cropping based on a set of rectangles to preserve
            </summary>
        </member>
    </members>
</doc>
